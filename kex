#!/bin/bash
#
# kex is a utility to quickly exec into a kubernetes pod.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

usage() {
  cat <<"EOF"
USAGE:
  kex             : exec in to the first listed pod
  kex -ls,--list  : list the available pods
  kex <NUM>       : exec into a specified pod
  kex -h,--help   : show this message
EOF
}

POD_NUM=${POD_NUM:-1}

pod_def(){
  kubectl get pods -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}' | nl
  exit 0
}

pod_default(){
  kubectl get pods -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}' | sed -n 1p
}

kube_def_bash(){
  kubectl exec -it $(pod_default) bash
}

# Placeholder for next version when bash isn't present in the container image.
# kube_def_sh(){
#   kubectl exec -it $(pod_default) sh
# }

pod_select(){
  kubectl get pods -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}' | sed -n ${POD_NUM}p
}

# Placeholder for next version when bash isn't present in the container image.
# kube_exec_sh() {
#   kubectl exec -it $(pod_select) sh
# }

kube_exec_bash() {
  kubectl exec -it $(pod_select) bash
}

main() {
  if [[ "$#" -eq 0 ]]; then
    kube_def_bash
  elif [[ "$#" -gt 1 ]]; then
    echo "error: too many flags" >&2
    usage
    exit 1
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
      exit 0
    elif [[ "${1}" == '-ls' || "${1}" == '--list' ]]; then
      pod_def
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
      exit 1
    fi
    if [[ "${1}" ]]; then
      POD_NUM=${1}
    kube_exec_bash
    fi
  fi
}

main "$@"
