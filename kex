#!/bin/bash
#
# See usage().

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

# We do this so the called script name variable is avilable in utility functions
# below, in case of name change, brew alias, etc.
SCRIPT=`basename ${BASH_SOURCE[0]}`

usage() {
  cat <<EOF
${SCRIPT}(1)

NAME
    ${SCRIPT} - Quick k8s pod exec utility.

REQUIRES
    kubectl(1)

SYNOPSIS
    ${SCRIPT} [-p <POD>|1] [-c <COMMAND>|bash] [-n <NAMESPACE>] [OPTIONS]

DESCRIPTION
    ${SCRIPT} is a quick kubernetes (k8s) utility to exec into a pod.

OPTIONS
    -l, --list
        List available pods
    -p, --pod
        Specify the pod number in the list to exec into. Default to "1"
    -n, --namespace
        Specify pod namespace. Default current namespace. See kubens(1)
    -c, --command
        Specify an alternative exec command. Defaults to "bash"
    -h, --help
        Show this help message

SEE ALSO
    kubectx(1), kubens(1)
EOF
}

po_list() {
  kubectl ${NS_PARAM:-} \
    get pods \
    -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'
}

po_number_list() {
  po_list | nl
}

po_select() {
  po_list | sed -n ${POD:-1}p
}

po_exec() {
  kubectl ${NS_PARAM:-} \
    exec -it $(po_select) ${COMMAND:-bash}
}

# Transform long options to short ones. Sick trick.
# http://stackoverflow.com/a/30026641/4096495
for arg in "$@"; do
  shift
  case "$arg" in
    "--list")       set -- "$@" "-l" ;;
    "--namespace")  set -- "$@" "-n" ;;
    "--pod")        set -- "$@" "-p" ;;
    "--command")    set -- "$@" "-c" ;;
    "--help")       set -- "$@" "-h" ;;
    *)              set -- "$@" "$arg"
  esac
done

while getopts :lhn:p:c: OPT; do
  case $OPT in
    l ) LIST=true;;
    n ) NAMESPACE=$OPTARG;;
    p ) POD=$OPTARG;;
    c ) COMMAND=$OPTARG;;
    h ) HELP=true;;
    \?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    : ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
  esac
done
shift $((OPTIND-1))

# Set ns first for use in any function.
if [[ ! -z ${NAMESPACE:-} ]]; then
  NS_PARAM="--namespace=$NAMESPACE"
fi

# Usage, list, and exec should not happen simultaneously, so elif.
if [[ ${HELP:-} == 'true' ]]; then
  usage; exit 0
elif [[ ${LIST:-} == 'true' ]]; then
  po_number_list; exit 0
else
  echo 'Select a pod number (default 1):';
  po_number_list;
  read POD;
  po_exec
fi
