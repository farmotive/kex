#!/bin/bash
#
# See usage().

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

# We do this so the called script name variable is avilable in utility functions
# below, in case of name change, brew alias, etc.
SCRIPT=`basename ${BASH_SOURCE[0]}`

usage() {
  cat <<EOF
${SCRIPT}(1)

NAME
    ${SCRIPT} - Quick k8s pod exec utility.

REQUIRES
    kubectl(1)

SYNOPSIS
    ${SCRIPT} [-n <NUMBER>|1] [-c <COMMAND>|bash] [OPTIONS]

DESCRIPTION
    ${SCRIPT} is a quick kubernetes (k8s) utility to exec into a pod.

OPTIONS
    -l, --list
        List available pods
    -n, --number
        Specify the pod number in the list to exec into. Default to "1"
    -c, --command
        Specify an alternative exec command. Defaults to "bash"
    -h, --help
        Show this help message

SEE ALSO
    kubectx(1), kubens(1)
EOF
}

po_list() {
  kubectl get pods -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'
}

po_number_list() {
  po_list | nl
}

po_select() {
  po_list | sed -n ${NUMBER:-1}p
}

po_exec() {
  kubectl exec -it $(po_select) ${COMMAND:-bash}
}

# Transform long options to short ones. Sick trick.
# http://stackoverflow.com/a/30026641/4096495
for arg in "$@"; do
  shift
  case "$arg" in
    "--list")     set -- "$@" "-l" ;;
    "--number")   set -- "$@" "-n" ;;
    "--command")  set -- "$@" "-c" ;;
    "--help")     set -- "$@" "-h" ;;
    *)            set -- "$@" "$arg"
  esac
done

while getopts :lhn:c: OPT; do
  case $OPT in
    l ) po_number_list; exit 0;;
    n ) NUMBER=$OPTARG;;
    c ) COMMAND=$OPTARG;;
    h ) usage; exit 0;;
    \?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    : ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
  esac
done
shift $((OPTIND-1))

# If we get past validation without exiting, exec.
po_exec
